# Danfoss FC200 integration via Modbus using Raspberry PI Pico + SP3485 Transceiver
# https://files.danfoss.com/download/Drives/MG20O622.pdf
# https://www.waveshare.com/pico-2ch-rs485.htm
# https://www.anodas.lt/2-kanalu-rs485-2-kanalu-uart-rs485-modulis-sp3485-skirtas-raspberry-pi-pico-waveshare-19717

esphome:
  name: "danfoss-pico"
  friendly_name: "danfoss-pico"

rp2040:
  board: rpipicow
  framework:
    # Required until https://github.com/platformio/platform-raspberrypi/pull/36 is merged
    platform_version: https://github.com/maxgerhardt/platform-raspberrypi.git

# Enable logging
logger:

# Enable Home Assistant API
# api:
#   encryption:
#     key: "xxx"

# ota:
#   password: "xxx"

wifi:
  networks:
    - ssid: !secret wifi_ssid
      password: !secret wifi_password

  # Enable fallback hotspot in case wifi connection fails
  ap:
    ssid: "Danfoss-Pico Fallback"
    password: "xxx"

time:
  - platform: homeassistant
    id: homeassistant_time
    on_time_sync: 
      then:
        - script.execute: set_time

uart:
  - id: modbus_uart0
    baud_rate: 9600
    rx_pin: 1
    tx_pin: 0
    parity: EVEN
    stop_bits: 1
    debug:

modbus:
  - id: modbus0
    uart_id: modbus_uart0

modbus_controller:
  - id: modbus_device0
    address: 0x1 # address of the Modbus slave device on the bus
    modbus_id: modbus0
    update_interval: 3s

binary_sensor:
  # - platform: modbus_controller
  #   name: "Control ready"
  #   id: control_ready
  #   register_type: coil
  #   address: 0x20
  # - platform: modbus_controller
  #   name: "Drive ready"
  #   id: drive_ready
  #   register_type: coil
  #   address: 0x21
  # - platform: modbus_controller
  #   name: "Safety closed"
  #   id: safety_closed
  #   register_type: coil
  #   address: 0x22
  - platform: modbus_controller
    name: "Alarm"
    id: alarm_set
    register_type: coil
    address: 0x23
  - platform: modbus_controller
    name: "Warning"
    id: warning_set
    register_type: coil
    address: 0x27
  # - platform: modbus_controller
  #   name: "At reference"
  #   id: at_reference
  #   register_type: coil
  #   address: 0x28
  # - platform: modbus_controller
  #   name: "Auto mode"
  #   id: auto_mode
  #   register_type: coil
  #   address: 0x29
  # - platform: modbus_controller
  #   name: "In frequency range"
  #   id: in_freq_range
  #   register_type: coil
  #   address: 0x2A
  - platform: modbus_controller
    name: "Running"
    id: running
    register_type: coil
    address: 0x2B
  - platform: modbus_controller
    name: "Voltage warning"
    id: voltage_warning
    register_type: coil
    address: 0x2D
  - platform: modbus_controller
    name: "Current limit"
    id: current_limit
    register_type: coil
    address: 0x2E
  - platform: modbus_controller
    name: "Thermal warning"
    id: thermal_warning
    register_type: coil
    address: 0x2F

sensor:
  - platform: internal_temperature
    name: "Internal Temperature"

  - platform: uptime
    name: "Uptime"
  
  - platform: wifi_signal
    name: "Wi-Fi Signal"
    update_interval: 60s

  - platform: modbus_controller
    id: digital_input_27
    name: "Digital input 27"
    register_type: holding
    address: 0x13FF # 5-12 param, 5120 - 1 = 5119 dec -> hex
    value_type: U_WORD

  - platform: modbus_controller
    id: kwh_counter
    name: "kWh counter"
    register_type: holding
    address: 0x3AAB # 15-02 param, 15020 - 1 = 15019 dec -> hex
    value_type: U_DWORD
    unit_of_measurement: kWh
    device_class: energy
    state_class: total_increasing
    
  - platform: modbus_controller
    id: number_of_starts
    name: "Number of starts"
    register_type: holding
    address: 0x3AE7 # 15-08 param, 15080 - 1 = 15079 dec -> hex
    value_type: U_DWORD
    state_class: total_increasing

  - platform: modbus_controller
    id: power
    name: "Power"
    register_type: holding
    address: 0x3EE3 # 16-10 param, 16100 - 1 = 16099 dec -> hex
    value_type: S_DWORD
    unit_of_measurement: kW
    device_class: power
    state_class: measurement
    accuracy_decimals: 2
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    id: heatsink_temp
    name: "Heatsink temperature"
    register_type: holding
    address: 0x3FD3 # 16-34 param, 16340 - 1 = 16339 dec -> hex
    value_type: U_WORD
    unit_of_measurement: C
    device_class: temperature

  - platform: modbus_controller
    id: analog_input_54
    name: "Analog input 54"
    register_type: holding
    address: 0x40FF # 16-64 param, 16640 - 1 = 16639 dec -> hex
    value_type: S_DWORD
    accuracy_decimals: 3
    filters:
      - multiply: 0.001
    state_class: measurement

  # - platform: modbus_controller
  #   id: current_time
  #   register_type: holding
  #   address: 0x2BB # 0-70 param, 700 - 1 = 699 dec -> hex
  #   value_type: U_QWORD
  #   lambda: |-
  #     // danfoss timestamp consists of 6 bytes
  #     // first 4 bytes are milliseconds since midnight
  #     unsigned long milliseconds = 
  #       ((unsigned long)data[0] << 24) | 
  #       ((unsigned long)data[1] << 16) | 
  #       ((unsigned long)data[2] << 8) | 
  #       data[3];

  #     // last 2 bytes are days since 1984-01-01
  #     unsigned int days = ((unsigned int)data[4] << 8) | data[5];
      
  #     time_t unix_timestamp = (days + 5113) * 86400 + milliseconds / 1000;
      
  #     // ESP_LOGD("Modbus Sensor Lambda","Unix timestamp: %d", unix_timestamp);
  #     // ESP_LOGD("Modbus Sensor Lambda","Time: %s", ESPTime::from_epoch_utc(unix_timestamp).strftime("%Y-%m-%d %H:%M:%S").c_str());

  #     return unix_timestamp;

text_sensor:
  - platform: modbus_controller
    id: datetime_readout
    name: "Date and time"
    register_type: holding
    address: 0x379 # 0-89 param, 890 - 1 = 889 dec -> hex
    response_size: 20
    device_class: timestamp
  - platform: wifi_info
    ip_address:
      name: "IP Address"
    ssid:
      name: "Wi-Fi SSID"
    bssid:
      name: "Wi-Fi BSSID"
  - platform: version
    name: "ESPHome Version"
    hide_timestamp: false

output:
  - platform: gpio
    pin:
      number: LED
      mode: output
    id: onboard_led_output

light:
  - platform: binary
    id: onboard_led
    output: onboard_led_output
    name: "Board LED"

script:
  - id: set_time
    then:
      - lambda: |-
          if (!id(homeassistant_time).now().is_valid()) {
            ESP_LOGW("ModbusLambda", "ESP Time is not synchronized");
            return;
          }

          time_t now = id(homeassistant_time).now().timestamp + ESPTime::timezone_offset();          
          time_t seconds_since_1984 = now - 441763200; // 441763200 is the Unix timestamp for 1984-01-01
          uint16_t days_since_1984 = static_cast<uint16_t>(seconds_since_1984 / 86400);
          time_t seconds_since_midnight = fmod(seconds_since_1984, 86400);
          uint32_t milliseconds_since_midnight = static_cast<uint32_t>(seconds_since_midnight * 1000);

          std::vector<uint16_t> payload = {
            static_cast<uint16_t>(milliseconds_since_midnight >> 16),
            static_cast<uint16_t>(milliseconds_since_midnight & 0xFFFF),
            days_since_1984
          };

          modbus_controller::ModbusController *controller = id(modbus_device0);
        
          controller->queue_command(
            modbus_controller::ModbusCommandItem::create_write_multiple_command(controller, 0x2BB, 3, payload)
          );

          ESP_LOGI("ModbusLambda", "Set time: %d", now);

interval:
  - interval: 10min
    then: 
      - script.execute: set_time
